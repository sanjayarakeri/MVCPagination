@model  VitalAxisPMModelDetails.Models.Location
@{

    Layout = "~/Views/Shared/_Layout.cshtml";
}


<head>
    <!-- Meta, title, CSS, favicons, etc. -->
    <meta charset="utf-8">
    <title>CS Accessioning Error Log</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Font CSS (Via CDN) -->
    <link rel='stylesheet' type='text/css' href='https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700,800'>
    <!--<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:400,500,700,300">-->
    <!--<link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet">-->
    <!-- Datatables CSS -->
    <link rel="stylesheet" type="text/css" href="~/interface/vendor/plugins/datatables/media/css/dataTables.bootstrap.css">

    <!-- Datatables Editor CSS -->
    <link rel="stylesheet" type="text/css" href="~/interface/vendor/plugins/datatables/extensions/Editor/css/dataTables.editor.css">

    <!-- Theme CSS -->
    <link rel="stylesheet" type="text/css" href="~/interface/assets/skin/default_skin/css/theme.css">

    <!-- Favicon -->
    <link rel="shortcut icon" href="~/interface/assets/img/favicon.ico">

    <!-- Select2 Plugin CSS  -->
    <link rel="stylesheet" type="text/css" href="~/interface/vendor/plugins/select2/css/select2.css">
    <link href="~/interface/js/datepicker/css/bootstrap-datepicker.css" rel="stylesheet" />

    <!-- PACE CSS -->
    <link href="~/interface/assets/js/utility/pace/pace.css" rel="stylesheet" />

    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="/resources/demos/style.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <script type="text/javascript" src="~/interface/vendor/jquery/jquery-1.11.1.min.js"></script>
    <script type="text/javascript" src="~/interface/vendor/jquery/jquery_ui/jquery-ui.min.js"></script>

    <!-- Bootstrap -->
    <script type="text/javascript" src="~/interface/assets/js/bootstrap/bootstrap.min.js"></script>
    <script src="js/blockui/jquery.blockUI.js"></script>
    <!-- Datatables -->
    <script type="text/javascript" src="~/interface/vendor/plugins/datatables/media/js/jquery.dataTables.js"></script>

    <!-- Datatables Tabletools addon -->
    <script type="text/javascript" src="~/interface/vendor/plugins/datatables/extensions/TableTools/js/dataTables.tableTools.min.js"></script>

    <!-- Datatables Editor addon - READ LICENSING NOT MIT  -->
    <script type="text/javascript" src="~/interface/vendor/plugins/datatables/extensions/Editor/js/dataTables.editor.js"></script>

    <!-- Datatables Bootstrap Modifications  -->
    <script type="text/javascript" src="~/interface/vendor/plugins/datatables/media/js/dataTables.bootstrap.js"></script>
    <script type="text/javascript" src="~/interface/vendor/plugins/datatables/extensions/Editor/js/editor.bootstrap.js"></script>

    <!-- Theme Javascript -->
    <script type="text/javascript" src="~/interface/assets/js/utility/utility.js"></script>
    <script type="text/javascript" src="~/interface/assets/js/main.js"></script>
    <script type="text/javascript" src="~/interface/assets/js/demo.js"></script>
    <script type="text/javascript" src="~/interface/js/interfacejs/csbasic.js"></script>
    <script type="text/javascript" src="~/interface/vendor/plugins/jquerymask/jquery.maskedinput.min.js"></script>
    <link href="~/Content/font-awesome.css" rel="stylesheet" />
    <!-- Select2 Plugin Plugin -->
    <script src="~/interface/vendor/plugins/select2/js/select2.min.js"></script>
    <script src="~/interface/vendor/plugins/tableexport/jquery.table2excel.js"></script>
    <script src="~/interface/vendor/plugins/cookie/jquery.cookie.js"></script>
    <script src="~/interface/js/datepicker/js/bootstrap-datepicker.js"></script>
</head>
<body>
    @using (Html.BeginForm("ErrorLog", "Accessioning", FormMethod.Post))
    {
        @Html.ValidationSummary()
        @Html.Hidden("FetchRecords", Url.Action("CustomerLog", "Accessioning"));
                    <!-- Begin: Content -->
        <section id="content" class="table-layout animated fadeIn">
            <div class="row">
                <div class="col-md-3">
                    <div class="panel">
                        <div class="panel-heading">
                            <span class="panel-title">CS Accessioning Error Log</span>
                        </div>
                        <div class="panel-body">
                            <table class="table">
                                <tr>
                                    <td>Start Date</td>
                                    <td><input name="tstartdate" class="form-control" type="date" id="tstartdate" style="width:150px" /> </td>
                                </tr>
                                <tr>
                                    <td>End Date</td>
                                    <td><input name="tenddate" class="form-control" type="date" id="tenddate" style="width:150px" /> </td>
                                </tr>
                                <tr>
                                    <td>Identified By</td>
                                    <td>
                                        <div class="checkbox-custom checkbox-primary mb5">
                                            <input type="checkbox" checked id="cblab" name="cblab">
                                            <label for="cblab" id="cblab">Lab</label>
                                        </div>
                                        <div class="checkbox-custom checkbox-primary mb5">
                                            <input type="checkbox" checked id="cbcustomer" name="cbcustomer">
                                            <label for="cbcustomer">Customer</label>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        @*<select id="sellocation" name="sellocation" class="form-control">
                                                <option value="Select">Client Location</option>
                                            </select>*@
                                        @Html.DropDownListFor(m => m.LocationNames, (IEnumerable<SelectListItem>)ViewBag.LocationList, "Select", new { @id = "sellocation", @class = "form-control" })
                                    </td>
                                    @*@Html.DropDownList("ClientList", (IEnumerable<SelectListItem>)ViewBag.ClientList, "Client Location", new { @id = "sellocation", @class = "form-control", onchange = "getcorrectionCustmerlog()" })
                                        </td>*@

                                </tr>
                                <tr>
                                    <td>Error By</td>
                                    <td>
                                        <div class="checkbox-custom checkbox-alert mb5">
                                            <input type="checkbox" checked id="cblab1" name="cblab1">
                                            <label for="cblab1">Lab</label>
                                        </div>
                                        <div class="checkbox-custom checkbox-alert mb5">
                                            <input type="checkbox" checked id="cbcustomer1" name="cbcustomer1">
                                            <label for="cbcustomer1">Customer</label>
                                        </div>
                                    </td>
                                </tr>
                                <tr>

                                    <td colspan="2">
                                        @*<select id="selemployee" name="selemployee" class="form-control">
                                                <option value="Select">Corrected By</option>
                                            </select>*@
                                        @Html.DropDownList("CorrectedByList", (IEnumerable<SelectListItem>)ViewBag.CorrectedByList, "Corrected By", new { @id = "selemployee", @class = "form-control" })
                                    </td>

                                </tr>
                            </table>
                        </div>
                    </div>


                </div>
                <div class="col-md-9">
                    <div class="panel">
                        <div class="panel-heading">
                            <span class="panel-title">Search Results</span>
                        </div>
                        <div class="panel-body">
                            <div id="divrol">
                                @{
                                    Html.RenderPartial("_PartialGrid");
                                }
                            </div>
                        </div>

                    </div>
                </div>
            </div>

        </section>

                                    }

    <script type="text/javascript">

        jQuery(document).ready(function () {
            var CurrentPage = "@ViewBag.CurrentPage";
            var currentOrderByColumn = "";
            var cssClassName = "";
            var selectedItem = 10;
            jQuery('#NoOfPages option[value="10"]').attr("selected", "selected");

            jQuery(document).on("change", "#NoOfPages", function () {
                selectedItem = $("#NoOfPages").children('option:selected').val();

                var data = {
                    OrderBy: currentOrderByColumn,
                    SearchBy: jQuery.trim(jQuery(".filter").val()),
                    currentPage: jQuery(this).attr("pagenumber"),
                    pageSize: parseInt(selectedItem),
                    tstartdate: $("#tstartdate").val(),
                    tenddate: $("#tenddate").val(),
                    cblab: $("#cblab").val(),
                    cblab1: $("#cblab1").val(),
                    cbcustomer: $("#cbcustomer").val(),
                    cbcustomer1: $("#cbcustomer1").val(),
                    selemployee: $("#selemployee").val(),
                    sellocation: $("#sellocation").val()
                }

                jQuery.ajax({
                    url: "/Accessioning/getTable",
                    type: 'POST',
                    data: JSON.stringify(data), //"{'OrderBy': '" + currentOrderByColumn + "','SearchBy': '" + jQuery.trim(jQuery(".filter").val()) + "','currentPage': '" + jQuery(this).attr("pagenumber") + "','pageSize':'" + parseInt($(this).children('option:selected').val()) + "'}",
                    contentType: "application/json; charset=utf-8",  // if sending in the request body
                    dataType: 'json',
                    async: false,
                }).done(function (data, textStatus, jqXHR) {
                    // because dataType is json 'data' is guaranteed to be an object
                    console.log('done');
                    CurrentPage = data.CurrentPage;
                    jQuery("#divrol").html(data.htmlBuilder);
                    $('#NoOfPages option[value="' + selectedItem + '"]').attr("selected", "selected");
                    jQuery("#" + currentOrderByColumn.split("_")[0]).find(".header-column").removeClass("fa fa-sort pull-right");
                    jQuery(".header-column").find("i").addClass("fa fa-sort pull-right");
                    if (currentOrderByColumn !== "") {
                        jQuery("#" + currentOrderByColumn.split("_")[0]).find("i").addClass(cssClassName);
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    // the response is not guaranteed to be json
                    if (jqXHR.responseJSON) {
                        // jqXHR.reseponseJSON is an object
                        console.log('failed with json data');
                    }
                    else {
                        // jqXHR.responseText is not JSON data
                        console.log('failed with unknown data');
                    }
                }).always(function (dataOrjqXHR, textStatus, jqXHRorErrorThrown) {
                    console.log('always');
                });
            });

            jQuery(document).on("click", "#correctionlogid,#dateidentified,#identifiedby,#accessionnumber,#location,#errorcreatedby,#datecorrected,#correctedby", function () {
                var self = $(this);
                var column = "";
                var OrderBy = "";

                if ($(this).find("i").hasClass('fa-sort')) {
                    column = jQuery(this).attr("id") + "_" + "Asc";
                    cssClassName = ['fa', 'fa-sort-asc', 'pull-right'].join(" ");
                }
                if ($(this).find("i").hasClass('fa-sort-asc')) {
                    column = jQuery(this).attr("id") + "_" + "Desc";
                    cssClassName = "fa fa-sort-desc pull-right";
                }
                if ($(this).find("i").hasClass('fa-sort-desc')) {
                    column = "";
                    cssClassName = "fa fa-sort pull-right";
                }

                currentOrderByColumn = column;

                var data = {
                    OrderBy: currentOrderByColumn,
                    SearchBy: jQuery.trim(jQuery(".filter").val()),
                    currentPage: jQuery(this).attr("pagenumber"),
                    pageSize: parseInt(selectedItem),
                    tstartdate: $("#tstartdate").val(),
                    tenddate: $("#tenddate").val(),
                    cblab: $("#cblab").val(),
                    cblab1: $("#cblab1").val(),
                    cbcustomer: $("#cbcustomer").val(),
                    cbcustomer1: $("#cbcustomer1").val(),
                    selemployee: $("#selemployee").val(),
                    sellocation: $("#sellocation").val()
                }

                jQuery.ajax({
                    url: "/Accessioning/getTable",
                    type: 'POST',
                    data: JSON.stringify(data),  //"{'OrderBy': '" + column + "','SearchBy': '" + jQuery(".filter").val() + "','currentPage': '" + jQuery(this).attr("pagenumber") + "','pageSize':'" + parseInt(selectedItem) + "'}",
                    contentType: "application/json; charset=utf-8",  // if sending in the request body
                    dataType: 'json',
                    async: false,
                }).done(function (data, textStatus, jqXHR) {
                    // because dataType is json 'data' is guaranteed to be an object
                    CurrentPage = data.CurrentPage;
                    jQuery("#divrol").html(data.htmlBuilder);
                    //jQuery('#NoOfPages option[value="' + selectedItem + '"]').attr("selected", "selected");
                    jQuery('#NoOfPages option[value="' + selectedItem + '"]').attr("selected", "selected");
                    jQuery("#divrol").find(".header-column").find("i").addClass("fa fa-sort pull-right");
                    jQuery("#" + jQuery(self).attr("id")).find("i").removeClass().addClass(cssClassName);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    // the response is not guaranteed to be json
                    if (jqXHR.responseJSON) {
                        // jqXHR.reseponseJSON is an object
                        console.log('failed with json data');

                    }
                    else {
                        // jqXHR.responseText is not JSON data
                        console.log('failed with unknown data');
                    }
                }).always(function (dataOrjqXHR, textStatus, jqXHRorErrorThrown) {
                    console.log('always');
                });

            });

            jQuery(document).on("click", ".currentPage", function () {
                if ($(this).parent("li").hasClass("disabled")) {
                    event.preventDefault();
                    return false;
                }

                var data = {
                    OrderBy: currentOrderByColumn,
                    SearchBy: jQuery.trim(jQuery(".filter").val()),
                    currentPage: jQuery(this).attr("pagenumber"),
                    pageSize: parseInt(selectedItem),
                    tstartdate: $("#tstartdate").val(),
                    tenddate: $("#tenddate").val(),
                    cblab: $("#cblab").val(),
                    cblab1: $("#cblab1").val(),
                    cbcustomer: $("#cbcustomer").val(),
                    cbcustomer1: $("#cbcustomer1").val(),
                    selemployee: $("#selemployee").val(),
                    sellocation: $("#sellocation").val()
                }

                jQuery.ajax({
                    url: "/Accessioning/getTable",
                    type: 'POST',
                    data: JSON.stringify(data),  //"{'OrderBy': '" + currentOrderByColumn + "','SearchBy': '" + jQuery.trim(jQuery(".filter").val()) + "','currentPage': '" + jQuery(this).attr("pagenumber") + "','pageSize':'" + parseInt(selectedItem) + "'}",
                    contentType: "application/json; charset=utf-8",  // if sending in the request body
                    dataType: 'json',
                    async: false,
                }).done(function (data, textStatus, jqXHR) {
                    // because dataType is json 'data' is guaranteed to be an object
                    console.log('done');
                    CurrentPage = data.CurrentPage;
                    jQuery("#divrol").html(data.htmlBuilder);
                    jQuery('#NoOfPages option[value="' + selectedItem + '"]').attr("selected", "selected");
                    jQuery("#" + currentOrderByColumn.split("_")[0]).find(".header-column").removeClass("fa fa-sort pull-right");
                    jQuery(".header-column").find("i").addClass("fa fa-sort pull-right");
                    if (currentOrderByColumn !== "") {
                        jQuery("#" + currentOrderByColumn.split("_")[0]).find("i").addClass(cssClassName);
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    // the response is not guaranteed to be json
                    if (jqXHR.responseJSON) {
                        // jqXHR.reseponseJSON is an object
                        console.log('failed with json data');

                    }
                    else {
                        // jqXHR.responseText is not JSON data
                        console.log('failed with unknown data');
                    }
                }).always(function (dataOrjqXHR, textStatus, jqXHRorErrorThrown) {
                    console.log('always');
                });

            });



            jQuery(document).on("change", ".filter", function () {
                $("#cblab").attr("checked", false);
                $("#cblab1").attr("checked", false);
                $("#cbcustomer").attr("checked", false);
                $("#cbcustomer1").attr("checked", false);
                $('#selemployee option[value=""]').attr("selected", "selected");
                $('#sellocation option[value=""]').attr("selected", "selected");

                var data = {
                    OrderBy: currentOrderByColumn,
                    SearchBy: jQuery.trim(jQuery(".filter").val()),
                    currentPage: jQuery(this).attr("pagenumber"),
                    pageSize: 10,//!!($("#NoOfPages").children('option:selected').val()) ? $("#NoOfPages").children('option:selected').val() : parseInt(selectedItem),//parseInt(selectedItem),
                    tstartdate: '',//$("#tstartdate").val(),
                    tenddate: '',//$("#tenddate").val(),
                    cblab: $("#cblab").val(),
                    cblab1: $("#cblab1").val(),
                    cbcustomer: $("#cbcustomer").val(),
                    cbcustomer1: $("#cbcustomer1").val(),
                    selemployee: $("#selemployee").val(),
                    sellocation: $("#sellocation").val()
                }

                jQuery.ajax({
                    url: "/Accessioning/getTable",
                    type: 'POST',
                    data: JSON.stringify(data), //"{'OrderBy': '','SearchBy': '" + jQuery(this).val() + "','currentPage': '" + null + "','pageSize':'" + null + "'}",
                    contentType: "application/json; charset=utf-8",  // if sending in the request body
                    dataType: 'json',
                    async: false,
                }).done(function (data, textStatus, jqXHR) {
                    // because dataType is json 'data' is guaranteed to be an object
                    console.log('done');
                    CurrentPage = data.CurrentPage;
                    jQuery("#divrol").html(data.htmlBuilder);
                    jQuery('#NoOfPages option[value="10"]').attr("selected", "selected");
                    selectedItem = 10;
                    jQuery(".header-column").find("i").addClass("fa fa-sort pull-right");
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    // the response is not guaranteed to be json
                    if (jqXHR.responseJSON) {
                        // jqXHR.reseponseJSON is an object
                        console.log('failed with json data');
                    }
                    else {
                        // jqXHR.responseText is not JSON data
                        console.log('failed with unknown data');
                    }
                }).always(function (dataOrjqXHR, textStatus, jqXHRorErrorThrown) {
                    console.log('always');
                });
            });

            $("#cblab,#tstartdate,#tenddate").change(function () {
                $("#cblab").val("");
                $("#cbcustomer").val("");
                $("#cblab1").val("");
                $("#cbcustomer1").val("");
                if (this.checked) {
                    //Do stuff
                    $("#cblab").val("true");
                }
                else {
                    $("#cblab").val("false");
                }
                if (!$("#cbcustomer").is(':checked')) {
                    $("#cbcustomer").val("false");
                }
                else {
                    $("#cbcustomer").val("true");
                }
                if (!$("#cbcustomer1").is(':checked')) {
                    $("#cbcustomer1").val("false");
                }
                else {
                    $("#cbcustomer1").val("true");
                }
                if (!$("#cblab1").is(':checked')) {
                    $("#cblab1").val("false");
                }
                else {
                    $("#cblab1").val("true");
                }
                $.ajax({
                    type: "POST",
                    url: $("#FetchRecords").val(),
                    data: "{'tstartdate': '" + $("#tstartdate").val() + "', 'tenddate': '" + $("#tenddate").val() + "', 'cblab': '" + $("#cblab").val() + "', 'sellocation': '" + $("#sellocation").val() + "', 'cblab1': '" + $("#cblab1").val() + "', 'cbcustomer1': '" + $("#cbcustomer1").val() + "', 'selemployee': '" + $("#selemployee").val() + "','cbcustomer': '" + $("#cbcustomer").val() + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "text",
                    success: function (response) {
                        $("#divrol").html("");
                        $("#divrol").html(response);
                        jQuery("#divrol").find(".header-column").find("i").addClass("fa fa-sort pull-right");
                        jQuery('#NoOfPages option[value="10"]').attr("selected", "selected");
                        selectedItem = 10;

                    },
                    error: function (e) {
                        console.log(e.responseText);
                    }
                });

            });
            $("#cbcustomer").change(function () {

                $("#cblab").val("");
                $("#cbcustomer").val("");
                $("#cblab1").val("");
                $("#cbcustomer1").val("");
                if (this.checked) {
                    //Do stuff
                    $("#cbcustomer").val("true");
                }
                else {
                    $("#cbcustomer").val("false");
                }
                if (!$("#cblab").is(':checked')) {
                    $("#cblab").val("false");
                }
                else {
                    $("#cblab").val("true");
                }
                if (!$("#cbcustomer1").is(':checked')) {
                    $("#cbcustomer1").val("false");
                }
                else {
                    $("#cbcustomer1").val("true");
                }
                if (!$("#cblab1").is(':checked')) {
                    $("#cblab1").val("false");
                }
                else {
                    $("#cblab1").val("true");
                }
                $.ajax({
                    type: "POST",
                    url: $("#FetchRecords").val(),
                    data: "{'tstartdate': '" + $("#tstartdate").val() + "', 'tenddate': '" + $("#tenddate").val() + "', 'cblab': '" + $("#cblab").val() + "', 'sellocation': '" + $("#sellocation").val() + "', 'cblab1': '" + $("#cblab1").val() + "', 'cbcustomer1': '" + $("#cbcustomer1").val() + "', 'selemployee': '" + $("#selemployee").val() + "','cbcustomer': '" + $("#cbcustomer").val() + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "text",
                    success: function (response) {
                        $("#divrol").html("");
                        $("#divrol").html(response);
                        jQuery("#divrol").find(".header-column").find("i").addClass("fa fa-sort pull-right");
                        jQuery('#NoOfPages option[value="10"]').attr("selected", "selected");
                        selectedItem = 10;

                    },
                    error: function (e) {
                        console.log(e.responseText);
                    }
                });

            });
            $("#cblab1").change(function () {

                $("#cblab1").val("");
                $("#cbcustomer1").val("");
                $("#cblab").val("");
                $("#cbcustomer").val("");
                if (this.checked) {
                    //Do stuff
                    $("#cblab1").val("true");
                }
                else {
                    $("#cblab1").val("false");
                }

                if (!$("#cbcustomer1").is(':checked')) {
                    $("#cbcustomer1").val("false");
                }
                else {
                    $("#cbcustomer1").val("true");
                }
                if (!$("#cbcustomer").is(':checked')) {
                    $("#cbcustomer").val("false");
                }
                else {
                    $("#cbcustomer").val("true");
                }
                if (!$("#cblab").is(':checked')) {
                    $("#cblab").val("false");
                }
                else {
                    $("#cblab").val("true");
                }
                $.ajax({
                    type: "POST",
                    url: $("#FetchRecords").val(),
                    data: "{'tstartdate': '" + $("#tstartdate").val() + "', 'tenddate': '" + $("#tenddate").val() + "', 'cblab': '" + $("#cblab").val() + "', 'sellocation': '" + $("#sellocation").val() + "', 'cblab1': '" + $("#cblab1").val() + "', 'cbcustomer1': '" + $("#cbcustomer1").val() + "', 'selemployee': '" + $("#selemployee").val() + "','cbcustomer': '" + $("#cbcustomer").val() + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "text",
                    success: function (response) {
                        $("#divrol").html("");
                        $("#divrol").html(response);
                        jQuery("#divrol").find(".header-column").find("i").addClass("fa fa-sort pull-right");
                        jQuery('#NoOfPages option[value="10"]').attr("selected", "selected");
                        selectedItem = 10;

                    },
                    error: function (e) {
                        console.log(e.responseText);
                    }
                });

            });
            $("#cbcustomer1").change(function () {

                $("#cblab1").val("");
                $("#cbcustomer1").val("");
                $("#cblab").val("");
                $("#cbcustomer").val("");
                if (this.checked) {
                    //Do stuff
                    $("#cbcustomer1").val("true");
                }
                else {
                    $("#cbcustomer1").val("false");
                }
                if (!$("#cblab").is(':checked')) {
                    $("#cblab").val("false");
                }
                else {
                    $("#cblab").val("true");
                }
                if (!$("#cblab1").is(':checked')) {
                    $("#cblab1").val("false");
                }
                else {
                    $("#cblab1").val("true");
                }
                if (!$("#cbcustomer").is(':checked')) {
                    $("#cbcustomer").val("false");
                }
                else {
                    $("#cbcustomer").val("true");
                }
                $.ajax({
                    type: "POST",
                    url: $("#FetchRecords").val(),
                    data: "{'tstartdate': '" + $("#tstartdate").val() + "', 'tenddate': '" + $("#tenddate").val() + "', 'cblab': '" + $("#cblab").val() + "', 'sellocation': '" + $("#sellocation").val() + "', 'cblab1': '" + $("#cblab1").val() + "', 'cbcustomer1': '" + $("#cbcustomer1").val() + "', 'selemployee': '" + $("#selemployee").val() + "','cbcustomer': '" + $("#cbcustomer").val() + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "text",
                    success: function (response) {
                        $("#divrol").html("");
                        $("#divrol").html(response);
                        jQuery("#divrol").find(".header-column").find("i").addClass("fa fa-sort pull-right");
                        jQuery('#NoOfPages option[value="10"]').attr("selected", "selected");
                        selectedItem = 10;

                    },
                    error: function (e) {
                        console.log(e.responseText);
                    }
                });

            });
            $("#sellocation").change(function () {

                $("#cblab1").val("");
                $("#cbcustomer1").val("");
                $("#cblab").val("");
                $("#cbcustomer").val("");


                if (!$("#cbcustomer1").is(':checked')) {
                    $("#cbcustomer1").val("false");
                }
                else {
                    $("#cbcustomer1").val("true");
                }
                if (!$("#cbcustomer").is(':checked')) {
                    $("#cbcustomer").val("false");
                }
                else {
                    $("#cbcustomer").val("true");
                }
                if (!$("#cblab").is(':checked')) {
                    $("#cblab").val("false");
                }
                else {
                    $("#cblab").val("true");
                }
                if (!$("#cblab1").is(':checked')) {
                    $("#cblab1").val("false");
                }
                else {
                    $("#cblab1").val("true");
                }
                $.ajax({
                    type: "POST",
                    url: $("#FetchRecords").val(),
                    data: "{'tstartdate': '" + $("#tstartdate").val() + "', 'tenddate': '" + $("#tenddate").val() + "', 'cblab': '" + $("#cblab").val() + "', 'sellocation': '" + $("#sellocation").val() + "', 'cblab1': '" + $("#cblab1").val() + "', 'cbcustomer1': '" + $("#cbcustomer1").val() + "', 'selemployee': '" + $("#selemployee").val() + "','cbcustomer': '" + $("#cbcustomer").val() + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "text",
                    success: function (response) {
                        $("#divrol").html("");
                        $("#divrol").html(response);
                        jQuery("#divrol").find(".header-column").find("i").addClass("fa fa-sort pull-right");
                        jQuery('#NoOfPages option[value="10"]').attr("selected", "selected");
                        selectedItem = 10;

                    },
                    error: function (e) {
                        console.log(e.responseText);
                    }
                });

            });
            $("#selemployee").change(function () {

                $("#cblab1").val("");
                $("#cbcustomer1").val("");
                $("#cblab").val("");
                $("#cbcustomer").val("");

                if (!$("#cblab").is(':checked')) {
                    $("#cblab").val("false");
                }
                else {
                    $("#cblab").val("true");
                }
                if (!$("#cblab1").is(':checked')) {
                    $("#cblab1").val("false");
                }
                else {
                    $("#cblab1").val("true");
                }
                if (!$("#cbcustomer").is(':checked')) {
                    $("#cbcustomer").val("false");
                }
                else {
                    $("#cbcustomer").val("true");
                }
                if (!$("#cbcustomer1").is(':checked')) {
                    $("#cbcustomer1").val("false");
                }
                else {
                    $("#cbcustomer1").val("true");
                }

                $.ajax({
                    type: "POST",
                    url: $("#FetchRecords").val(),
                    data: "{'tstartdate': '" + $("#tstartdate").val() + "', 'tenddate': '" + $("#tenddate").val() + "', 'cblab': '" + $("#cblab").val() + "', 'sellocation': '" + $("#sellocation").val() + "', 'cblab1': '" + $("#cblab1").val() + "', 'cbcustomer1': '" + $("#cbcustomer1").val() + "', 'selemployee': '" + $("#selemployee").val() + "','cbcustomer': '" + $("#cbcustomer").val() + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "text",
                    success: function (response) {
                        $("#divrol").html("");
                        $("#divrol").html(response);
                        jQuery("#divrol").find(".header-column").find("i").addClass("fa fa-sort pull-right");
                        jQuery('#NoOfPages option[value="10"]').attr("selected", "selected");
                        selectedItem = 10;

                    },
                    error: function (e) {
                        console.log(e.responseText);
                    }
                });

            });

        });
    </script>

</body>












using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using VitalAxisPMModelDetails.Models;
using System.Data.Entity;
using System.Threading.Tasks;
using VitalAxisCS.Models;
using System.Web.Security;
using System.Collections;
using System.IO;
using System.Text;

namespace VitalAxisPM.Controllers
{
    public class AccessioningController : Controller
    {
        public ActionResult UserLogout()
        {
            Session.Clear();
            FormsAuthentication.SignOut();
            return RedirectToAction("LogIn", "LogIn");
        }
        public ActionResult UserChangePassword()
        {
            Session.Clear();
            return RedirectToAction("UserChangePassword", "UserAccessControl");
        }
        public ActionResult UserHome()
        {
            Session.Clear();
            return RedirectToAction("UserHome", "UserAccessControl");
        }
        public ActionResult UserSettings()
        {
            Session.Clear();
            return RedirectToAction("UserSettings", "UserAccessControl");
        }
        public ActionResult UserAllAccounts()
        {
            Session.Clear();
            return RedirectToAction("UserAllAccounts", "UserAccessControl");
        }
        public ActionResult AccessioningInstructions()
        {
            return View();
        }

        private string ConvertViewToString(string viewName, object model)
        {
            ViewData.Model = model;
            using (StringWriter writer = new StringWriter())
            {
                ViewEngineResult vResult = ViewEngines.Engines.FindPartialView(ControllerContext, viewName);
                ViewContext vContext = new ViewContext(this.ControllerContext, vResult.View, ViewData, new TempDataDictionary(), writer);
                vResult.View.Render(vContext, writer);
                return writer.ToString();
            }
        }

        public JsonResult getTable(string OrderBy, string SearchBy, int? currentPage, int? pageSize,
            DateTime? tstartdate, DateTime? tenddate, string cblab, string sellocation, string cblab1,
            string cbcustomer1, string selemployee, string cbcustomer)
        {
            Entities e = new Entities();
            int totalRecords = 0;
            Pager pagerSettings = null;
            string orderByColumnName = null;
            string orderByColumnValue = null;
            //string cssClassName = null;
            bool isOrderByColumnDone = false;

            var lsttblAddROL = (from correctionlog in e.cs_correctionlog
                                select correctionlog).ToList();

            if (!string.IsNullOrEmpty(OrderBy) && OrderBy != "null")
            {
                orderByColumnName = OrderBy.Split('_')[0];
                orderByColumnValue = OrderBy.Split('_')[1];
            }	

            if (!string.IsNullOrEmpty(SearchBy))
            {
                lsttblAddROL = lsttblAddROL.
                    Where(CSLog =>
                    !string.IsNullOrEmpty(CSLog.dateidentified.ToString()) &&
                    !string.IsNullOrEmpty(CSLog.datecorrected.ToString()) &&
                    !string.IsNullOrEmpty(CSLog.correctedby) &&
                    !string.IsNullOrEmpty(CSLog.accessionnumber) &&
                    !string.IsNullOrEmpty(CSLog.errorcreatedby) &&
                    !string.IsNullOrEmpty(CSLog.location) ||
                    !string.IsNullOrEmpty(CSLog.identifiedby)).
                    Where(CSLog =>
                    CSLog.dateidentified.ToString().Contains(SearchBy) ||
                    CSLog.datecorrected.ToString().Contains(SearchBy) ||
                    CSLog.correctedby.Contains(SearchBy) ||
                    CSLog.accessionnumber.Contains(SearchBy) ||
                    CSLog.errorcreatedby.Contains(SearchBy) ||
                    CSLog.location.Contains(SearchBy) ||
                    CSLog.identifiedby.Contains(SearchBy)).ToList();
            }

           

            if (string.IsNullOrEmpty(SearchBy))
            {
                AccessionErrorloggingDetails(ref lsttblAddROL, tstartdate, tenddate, sellocation, selemployee, cblab, cblab1, cbcustomer, cbcustomer1);
            }

            if (!string.IsNullOrEmpty(OrderBy))
            {
                isOrderByColumnDone = true;
                switch (OrderBy)
                {
                    case "correctionlogid_Asc":
                        lsttblAddROL = lsttblAddROL.OrderBy(O => O.correctionlogid).ToList();
                        break;

                    case "correctionlogid_Desc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.correctionlogid).ToList();
                        break;

                    case "dateidentified_Asc":
                        lsttblAddROL = lsttblAddROL.OrderBy(O => O.dateidentified).ToList();
                        break;

                    case "dateidentified_Desc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.dateidentified).ToList();
                        break;

                    case "identifiedby_Asc":
                        lsttblAddROL = lsttblAddROL.OrderBy(O => O.identifiedby).ToList();
                        break;

                    case "identifiedby_Desc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.identifiedby).ToList();
                        break;

                    case "accessionnumber_Asc":
                        lsttblAddROL = lsttblAddROL.OrderBy(O => O.accessionnumber).ToList();
                        break;

                    case "accessionnumber_Desc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.accessionnumber).ToList();
                        break;

                    case "ShipAddress_Asc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.location).ToList();
                        break;

                    case "ShipAddress_Desc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.location).ToList();
                        break;

                    case "errorcreatedby_Asc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.errorcreatedby).ToList();
                        break;


                    case "errorcreatedby_Desc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.errorcreatedby).ToList();
                        break;

                    case "datecorrected_Asc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.datecorrected).ToList();
                        break;

                    case "datecorrected_Desc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.datecorrected).ToList();
                        break;

                    case "correctedby_Asc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.correctedby).ToList();
                        break;

                    case "correctedby_Desc":
                        lsttblAddROL = lsttblAddROL.OrderByDescending(O => O.correctedby).ToList();
                        break;

                }
            }

            totalRecords = lsttblAddROL.Count();
            pagerSettings = new Pager().GetPager(totalRecords, currentPage, pageSize);


            if (isOrderByColumnDone == true)
            {
                lsttblAddROL = lsttblAddROL.Skip(pagerSettings.startIndex).Take(pagerSettings.pageSize).ToList();
            }
            else
            {
                lsttblAddROL = lsttblAddROL.Skip(pagerSettings.startIndex).Take(pagerSettings.pageSize).ToList();
            }

            StringBuilder htmlBuilder = new StringBuilder();

            htmlBuilder = Pager.CreateHtmlFilterSearchBlock(htmlBuilder, SearchBy);

            htmlBuilder.Append("<table class='table table-bordered'>");
            htmlBuilder.Append("<thead>");
            htmlBuilder.Append("<tr>");
            htmlBuilder.Append("<th class='header-column' id='correctionlogid'>ID<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='dateidentified'> ID Dt<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='identifiedby'>ID By<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='accessionnumber'>Accession Number<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='location'>Location<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='errorcreatedby'>Error By<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='datecorrected'>Corr Dt<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='correctedby'>Corr By<i class=''></i></th>");
            htmlBuilder.Append("</tr>");
            htmlBuilder.Append("</thead>");

            htmlBuilder.Append("<tbody>");
            foreach (var item in lsttblAddROL)
            {

                htmlBuilder.Append("<tr>");
                htmlBuilder.Append("<td>" + item.correctionlogid + "</td>");
                htmlBuilder.Append("<td>" + item.dateidentified + "</td>");
                htmlBuilder.Append("<td>" + item.identifiedby + "</td>");
                htmlBuilder.Append("<td>" + item.accessionnumber + "</td>");
                htmlBuilder.Append("<td>" + item.location + "</td>");
                htmlBuilder.Append("<td>" + item.errorcreatedby + "</td>");
                htmlBuilder.Append("<td>" + item.datecorrected + "</td>");
                htmlBuilder.Append("<td>" + item.correctedby + "</td>");
                htmlBuilder.Append("</tr>");
            }
            htmlBuilder.Append("</tbody>");
            htmlBuilder.Append("</table>");

            htmlBuilder = Pager.CreateHtmlPagerLinksBlock(htmlBuilder, pagerSettings);

            return Json(new { htmlBuilder = htmlBuilder.ToString(), CurrentPage = pagerSettings.currentPage }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ErrorLog(string OrderBy, string SearchBy, int? currentPage, int? numberOfPagesToBeDisplayed)
        {
            Entities e = new Entities();
            List<cs_correctionlog> lsttblAddROL = null;
            int totalRecords = 0;
            Pager pagerSettings = null;

            //string[] HtmlTableHeaderColumns = ["ID", "ID Dt", "ID By", "AccessionNumber", "Location", "Error By", "Corr Dt", "Corr By"];
            //string[] HtmlTableHeaderColumnIDs =["correctionlogid", "dateidentified", "identifiedby", "accessionnumber", "location", "errorcreatedby", "datecorrected", "correctedby"];

            lsttblAddROL = e.cs_correctionlog.ToList(); ;
            totalRecords = lsttblAddROL.Count();
            pagerSettings = new Pager().GetPager(totalRecords, currentPage, numberOfPagesToBeDisplayed);
            lsttblAddROL = lsttblAddROL.Skip(pagerSettings.startIndex).Take(pagerSettings.pageSize).ToList();

            StringBuilder htmlBuilder = new StringBuilder();
            htmlBuilder = Pager.CreateHtmlFilterSearchBlock(htmlBuilder, SearchBy);

            htmlBuilder.Append("<table class='table table-bordered table-striped'>");

            htmlBuilder.Append("<thead>");
            htmlBuilder.Append("<tr>");
            htmlBuilder.Append("<th class='header-column' id='correctionlogid'>ID<i class='fa fa-sort pull-right'></i></th>");
            htmlBuilder.Append("<th class='header-column' id='dateidentified'>ID Dt<i class='fa fa-sort pull-right'></i></th>");
            htmlBuilder.Append("<th class='header-column' id='identifiedby'>ID By<i class='fa fa-sort  pull-right'></i></th>");
            htmlBuilder.Append("<th class='header-column' id='accessionnumber'>Accession Number<i class='fa fa-sort  pull-right'></i></th>");
            htmlBuilder.Append("<th class='header-column' id='location'>Location<i class='fa fa-sort  pull-right'></i></th>");
            htmlBuilder.Append("<th class='header-column' id='errorcreatedby'>Error By<i class='fa fa-sort  pull-right'></i></th>");
            htmlBuilder.Append("<th class='header-column' id='datecorrected'>Corr Dt<i class='fa fa-sort  pull-right'></i></th>");
            htmlBuilder.Append("<th class='header-column' id='correctedby'>Corr By<i class='fa fa-sort  pull-right'></i></th>");
            htmlBuilder.Append("</tr>");
            htmlBuilder.Append("</thead>");

            htmlBuilder.Append("<tbody>");
            foreach (var item in lsttblAddROL)
            {
                htmlBuilder.Append("<tr>");
                htmlBuilder.Append("<td>" + item.correctionlogid + "</td>");
                htmlBuilder.Append("<td>" + item.dateidentified + "</td>");
                htmlBuilder.Append("<td>" + item.identifiedby + "</td>");
                htmlBuilder.Append("<td>" + item.accessionnumber + "</td>");
                htmlBuilder.Append("<td>" + item.location + "</td>");
                htmlBuilder.Append("<td>" + item.errorcreatedby + "</td>");
                htmlBuilder.Append("<td>" + item.datecorrected + "</td>");
                htmlBuilder.Append("<td>" + item.correctedby + "</td>");
                htmlBuilder.Append("</tr>");
            }
            htmlBuilder.Append("</tbody>");

            htmlBuilder.Append("</table>");

            htmlBuilder = Pager.CreateHtmlPagerLinksBlock(htmlBuilder, pagerSettings);

            ViewBag.HtmlStr = htmlBuilder.ToString();
            ViewBag.CurrentPage = 1;

            var correctedby = (from s in e.cs_correctionlog
                               select s.correctedby).Distinct();

            SelectList CorrectedByList = new SelectList(correctedby);
            ViewBag.CorrectedByList = CorrectedByList;
            var query = (from s in e.Location_Infoes
                         select s.Location_Name).Distinct();

            SelectList LocationList = new SelectList(query);
            ViewBag.LocationList = LocationList;

            return View();
        }

        public ActionResult CustomerLog(DateTime? tstartdate, DateTime? tenddate, string cblab, string sellocation, string cblab1, string cbcustomer1, string selemployee, string cbcustomer)
        {

            List<cs_correctionlog> lsttblAddROL = null;
            int totalRecords = 0;
            Pager pagerSettings = null;

            AccessionErrorloggingDetails(ref lsttblAddROL, tstartdate, tenddate, sellocation, selemployee, cblab, cblab1, cbcustomer, cbcustomer1);

            pagerSettings = new Pager().GetPager(lsttblAddROL.Count(), null, 10);
            lsttblAddROL = lsttblAddROL.Skip(pagerSettings.startIndex).Take(pagerSettings.pageSize).ToList();

            StringBuilder htmlBuilder = new StringBuilder();

            htmlBuilder = Pager.CreateHtmlFilterSearchBlock(htmlBuilder, "");

            htmlBuilder.Append("<table class='table table-bordered'>");
            htmlBuilder.Append("<thead>");
            htmlBuilder.Append("<tr>");
            htmlBuilder.Append("<th class='header-column' id='correctionlogid'>ID<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='dateidentified'> ID Dt<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='identifiedby'>ID By<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='accessionnumber'>Accession Number<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='location'>Location<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='errorcreatedby'>Error By<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='datecorrected'>Corr Dt<i class=''></i></th>");
            htmlBuilder.Append("<th class='header-column' id='correctedby'>Corr By<i class=''></i></th>");
            htmlBuilder.Append("</tr>");
            htmlBuilder.Append("</thead>");

            htmlBuilder.Append("<tbody>");
            foreach (var item in lsttblAddROL)
            {

                htmlBuilder.Append("<tr>");
                htmlBuilder.Append("<td>" + item.correctionlogid + "</td>");
                htmlBuilder.Append("<td>" + item.dateidentified + "</td>");
                htmlBuilder.Append("<td>" + item.identifiedby + "</td>");
                htmlBuilder.Append("<td>" + item.accessionnumber + "</td>");
                htmlBuilder.Append("<td>" + item.location + "</td>");
                htmlBuilder.Append("<td>" + item.errorcreatedby + "</td>");
                htmlBuilder.Append("<td>" + item.datecorrected + "</td>");
                htmlBuilder.Append("<td>" + item.correctedby + "</td>");
                htmlBuilder.Append("</tr>");
            }
            htmlBuilder.Append("</tbody>");
            htmlBuilder.Append("</table>");

            htmlBuilder = Pager.CreateHtmlPagerLinksBlock(htmlBuilder, pagerSettings);

            ViewBag.HtmlStr = htmlBuilder;
            //  return Json(ViewBag.HtmlStr, JsonRequestBehavior.AllowGet);
            return PartialView("_PartialGrid");
        }

        public void AccessionErrorloggingDetails(ref List<cs_correctionlog> lsttblAddROL, DateTime? tstartdate, DateTime? tenddate, string sellocation, string selemployee, string cblab, string cblab1, string cbcustomer, string cbcustomer1)
        {
            Entities e = new Entities();
            lsttblAddROL = e.cs_correctionlog.ToList();

            if (!string.IsNullOrEmpty(tstartdate.ToString()) && !string.IsNullOrEmpty(tenddate.ToString()))
            {
                lsttblAddROL = lsttblAddROL.Where(x => (x.dateidentified >= Convert.ToDateTime(tstartdate) && x.dateidentified <= Convert.ToDateTime(tenddate))).ToList();
            }

            if (cblab == "true" && cbcustomer == "true" && cblab1 == "true" && cbcustomer1 == "true" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Lab" || t.identifiedby == "Customer" || t.errorcreatedby == "Lab" || t.errorcreatedby == "Customer").ToList();
            }

            #region one
            if (cblab == "false" && cbcustomer == "true" && cblab1 == "true" && cbcustomer1 == "true" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Customer" || t.errorcreatedby == "Lab" || t.errorcreatedby == "Customer").ToList();
            }

            if (cblab == "true" && cbcustomer == "false" && cblab1 == "true" && cbcustomer1 == "true" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Lab" || t.errorcreatedby == "Lab" || t.errorcreatedby == "Customer").ToList();
            }

            if (cblab == "true" && cbcustomer == "true" && cblab1 == "false" && cbcustomer1 == "true" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Lab" || t.identifiedby == "Customer" || t.errorcreatedby == "Customer").ToList();
            }

            if (cblab == "true" && cbcustomer == "true" && cblab1 == "true" && cbcustomer1 == "false" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Lab" || t.identifiedby == "Customer" || t.errorcreatedby == "Lab").ToList();
            }
            #endregion

            #region two 
            if (cblab == "false" && cbcustomer == "false" && cblab1 == "true" && cbcustomer1 == "true" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.errorcreatedby == "Lab" || t.errorcreatedby == "Customer").ToList();
            }

            if (cblab == "true" && cbcustomer == "true" && cblab1 == "false" && cbcustomer1 == "false" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Customer" || t.identifiedby == "Lab").ToList();
            }
            #endregion

            #region three 
            if (cblab == "false" && cbcustomer == "true" && cblab1 == "false" && cbcustomer1 == "true" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Customer" || t.errorcreatedby == "Customer").ToList();
            }

            if (cblab == "true" && cbcustomer == "false" && cblab1 == "true" && cbcustomer1 == "false" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Lab" || t.errorcreatedby == "Lab").ToList();
            }

            if (cblab == "false" && cbcustomer == "true" && cblab1 == "true" && cbcustomer1 == "false" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Customer" || t.errorcreatedby == "Lab" || t.errorcreatedby == "Customer").ToList();
            }

            if (cblab == "true" && cbcustomer == "false" && cblab1 == "false" && cbcustomer1 == "true" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Lab" || t.identifiedby == "Customer" || t.errorcreatedby == "Customer").ToList();
            }
            #endregion


            #region Fourth
            if (cblab == "false" && cbcustomer == "false" && cblab1 == "false" && cbcustomer1 == "true" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {	`	
                lsttblAddROL = lsttblAddROL.Where(t => t.errorcreatedby == "Customer").ToList();
            }

            if (cblab == "false" && cbcustomer == "false" && cblab1 == "true" && cbcustomer1 == "false" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.errorcreatedby == "Lab").ToList();
            }

            if (cblab == "true" && cbcustomer == "false" && cblab1 == "false" && cbcustomer1 == "false" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Lab").ToList();
            }

            if (cblab == "false" && cbcustomer == "true" && cblab1 == "false" && cbcustomer1 == "false" && string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.identifiedby == "Customer").ToList();
            }
            #endregion



            if (!string.IsNullOrEmpty(sellocation) && string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.location == sellocation).ToList();
            }

            if (string.IsNullOrEmpty(sellocation) && !string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.correctedby == selemployee).ToList();
            }

            if (!string.IsNullOrEmpty(sellocation) && !string.IsNullOrEmpty(selemployee))
            {
                lsttblAddROL = lsttblAddROL.Where(t => t.location == sellocation || t.correctedby == selemployee).ToList();
            }
        }
    }
}


















using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;

namespace VitalAxisCS.Models
{
    public class Pager
    {
        public int totalItems { get; set; }
        public int? currentPage { get; set; }
        public int pageSize { get; set; }
        public int totalPages { get; set; }
        public int startPage { get; set; }
        public int endPage { get; set; }
        public int startIndex { get; set; }
        public int endIndex { get; set; }
        public int pages { get; set; }

        public Pager GetPager(int totalItems, int? currentPage, int? pageSize)
        {
            // default to first page
            currentPage = (currentPage != null) ? currentPage : 1;

            // default page size is 10
            pageSize = (pageSize != null) ? pageSize : 10;

            // calculate total pages
            int totalPages = (int)Math.Ceiling(((double)totalItems / (double)pageSize));

            int startPage, endPage;
            if (totalPages <= 10)
            {
                // less than 10 total pages so show all
                startPage = 1;
                endPage = totalPages;
            }
            else
            {
                // more than 10 total pages so calculate start and end pages
                if (currentPage <= 6)
                {
                    startPage = 1;
                    endPage = 10;
                }
                else if (currentPage + 4 >= totalPages)
                {
                    startPage = totalPages - 9;
                    endPage = totalPages;
                }
                else
                {
                    startPage = (int)currentPage - 5;
                    endPage = (int)currentPage + 4;
                }
            }

            // calculate start and end item indexes
            int startIndex = (int)((currentPage - 1) * pageSize);
            int endIndex = Math.Min(startIndex + (int)pageSize - 1, totalItems - 1);

            this.totalItems = totalItems;
            this.currentPage = currentPage;
            this.pageSize = (int)pageSize;
            this.totalPages = totalPages;
            this.startPage = startPage;
            this.endPage = endPage;
            this.startIndex = startIndex;
            this.endIndex = endIndex;
            this.pages = pages;

            return this;
        }

        public static StringBuilder CreateHtmlFilterSearchBlock(StringBuilder htmlBuilder,string SearchBy)
        {
            htmlBuilder.Append("<div class='form-group row'>");
            htmlBuilder.Append("<div class='col-md-6'>");
            htmlBuilder.Append("<div class='col-md-2 text-right'>");
            htmlBuilder.Append("<label class='pull-left text-right'>Show:</ label>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("<div class='col-md-10'>");
            htmlBuilder.Append("<select class='form-control' id='NoOfPages'>");
            htmlBuilder.Append("<option value='5'>5</option>");
            htmlBuilder.Append("<option value='10'>10</option>");
            htmlBuilder.Append("<option value='25'>25</option>");
            htmlBuilder.Append("<option value='50'>50</option>");
            htmlBuilder.Append("</select>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("<div class='col-md-6'>");
            htmlBuilder.Append("<div class='col-md-2 text-right'>");
            htmlBuilder.Append("<label class='pull-left text-right'>Search:</label>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("<div class='col-md-10 text-right'>");
            htmlBuilder.Append("<input type='text' columnname='filter' value='" + SearchBy + "' class='filter form-control' />");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("</div>");

            return htmlBuilder;
        }

        public static StringBuilder CreateHtmlPagerLinksBlock(StringBuilder htmlBuilder,Pager pagerSettings)
        {
            htmlBuilder.Append("<div class='row'>");
            htmlBuilder.Append("<ul class='text-secondary bg-light text-dark text-center pagination col-md-3'>");
            if (pagerSettings.totalItems > 0)
            {
                htmlBuilder.Append("<li>Showing " + ++pagerSettings.startIndex + " To " + ++pagerSettings.endIndex + " Of " + pagerSettings.totalItems + "</li>");
            }
            else
            {
                htmlBuilder.Append("<li>Showing " + pagerSettings.startIndex + " To " + ++pagerSettings.endIndex + " Of " + pagerSettings.totalItems + "</li>");
            }
            htmlBuilder.Append("</ul>");

            htmlBuilder.Append("<div class='col-md-9'>");
            htmlBuilder.Append("<ul class='pagination pull-right'>");
            if (pagerSettings.startPage == 1)
            {
                htmlBuilder.Append("<li class='disabled'><a class='currentPage' pagenumber='" + 1 + "'>First</a></li>");
                htmlBuilder.Append("<li class='disabled'><a class='currentPage' pagenumber='" + (pagerSettings.currentPage - 1) + "'>Previous</a></li>");
            }
            else
            {
                htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + 1 + "'>First</a></li>");
                htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + (pagerSettings.currentPage) + "'>Previous</a></li>");
            }

            for (int i = pagerSettings.startPage; i <= pagerSettings.endPage; i++)
            {
                int pagenumber = pagerSettings.startPage;
                if (pagenumber == pagerSettings.currentPage)
                {
                    htmlBuilder.Append("<li  class='active'><a class='currentPage' pagenumber='" + pagenumber + "'>" + pagenumber + "</a></li>");
                }
                else
                {
                    htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + pagenumber + "'>" + pagenumber + "</a></li>");
                }
                ++pagerSettings.startPage;
            }

            if (pagerSettings.totalPages == pagerSettings.endPage)
            {
                htmlBuilder.Append("<li class='disabled'><a class='currentPage' pagenumber='" + (pagerSettings.currentPage + 1) + "'>Next</a></li>");
                htmlBuilder.Append("<li class='disabled'><a class='currentPage' pagenumber='" + (pagerSettings.totalPages) + "'>Last</a></li>");
            }
            else
            {
                htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + (pagerSettings.currentPage + 1) + "'>Next</a><li>");
                htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + (pagerSettings.totalPages) + "'>Last</a></li>");
            }
            htmlBuilder.Append("</ul>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("</div>");

            return htmlBuilder;
        }

        //public static StringBuilder CreateHtmlTableHeaderBlock(StringBuilder htmlBuilder,string[] HtmlTableHeaderColumns,string[] HtmlTableHeaderColumnIDs)
        //{
        //               return htmlBuilder;
        //} 
    }
}using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;

namespace VitalAxisCS.Models
{
    public class Pager
    {
        public int totalItems { get; set; }
        public int? currentPage { get; set; }
        public int pageSize { get; set; }
        public int totalPages { get; set; }
        public int startPage { get; set; }
        public int endPage { get; set; }
        public int startIndex { get; set; }
        public int endIndex { get; set; }
        public int pages { get; set; }

        public Pager GetPager(int totalItems, int? currentPage, int? pageSize)
        {
            // default to first page
            currentPage = (currentPage != null) ? currentPage : 1;

            // default page size is 10
            pageSize = (pageSize != null) ? pageSize : 10;

            // calculate total pages
            int totalPages = (int)Math.Ceiling(((double)totalItems / (double)pageSize));

            int startPage, endPage;
            if (totalPages <= 10)
            {
                // less than 10 total pages so show all
                startPage = 1;
                endPage = totalPages;
            }
            else
            {
                // more than 10 total pages so calculate start and end pages
                if (currentPage <= 6)
                {
                    startPage = 1;
                    endPage = 10;
                }
                else if (currentPage + 4 >= totalPages)
                {
                    startPage = totalPages - 9;
                    endPage = totalPages;
                }
                else
                {
                    startPage = (int)currentPage - 5;
                    endPage = (int)currentPage + 4;
                }
            }

            // calculate start and end item indexes
            int startIndex = (int)((currentPage - 1) * pageSize);
            int endIndex = Math.Min(startIndex + (int)pageSize - 1, totalItems - 1);

            this.totalItems = totalItems;
            this.currentPage = currentPage;
            this.pageSize = (int)pageSize;
            this.totalPages = totalPages;
            this.startPage = startPage;
            this.endPage = endPage;
            this.startIndex = startIndex;
            this.endIndex = endIndex;
            this.pages = pages;

            return this;
        }

        public static StringBuilder CreateHtmlFilterSearchBlock(StringBuilder htmlBuilder,string SearchBy)
        {
            htmlBuilder.Append("<div class='form-group row'>");
            htmlBuilder.Append("<div class='col-md-6'>");
            htmlBuilder.Append("<div class='col-md-2 text-right'>");
            htmlBuilder.Append("<label class='pull-left text-right'>Show:</ label>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("<div class='col-md-10'>");
            htmlBuilder.Append("<select class='form-control' id='NoOfPages'>");
            htmlBuilder.Append("<option value='5'>5</option>");
            htmlBuilder.Append("<option value='10'>10</option>");
            htmlBuilder.Append("<option value='25'>25</option>");
            htmlBuilder.Append("<option value='50'>50</option>");
            htmlBuilder.Append("</select>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("<div class='col-md-6'>");
            htmlBuilder.Append("<div class='col-md-2 text-right'>");
            htmlBuilder.Append("<label class='pull-left text-right'>Search:</label>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("<div class='col-md-10 text-right'>");
            htmlBuilder.Append("<input type='text' columnname='filter' value='" + SearchBy + "' class='filter form-control' />");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("</div>");

            return htmlBuilder;
        }

        public static StringBuilder CreateHtmlPagerLinksBlock(StringBuilder htmlBuilder,Pager pagerSettings)
        {
            htmlBuilder.Append("<div class='row'>");
            htmlBuilder.Append("<ul class='text-secondary bg-light text-dark text-center pagination col-md-3'>");
            if (pagerSettings.totalItems > 0)
            {
                htmlBuilder.Append("<li>Showing " + ++pagerSettings.startIndex + " To " + ++pagerSettings.endIndex + " Of " + pagerSettings.totalItems + "</li>");
            }
            else
            {
                htmlBuilder.Append("<li>Showing " + pagerSettings.startIndex + " To " + ++pagerSettings.endIndex + " Of " + pagerSettings.totalItems + "</li>");
            }
            htmlBuilder.Append("</ul>");

            htmlBuilder.Append("<div class='col-md-9'>");
            htmlBuilder.Append("<ul class='pagination pull-right'>");
            if (pagerSettings.startPage == 1)
            {
                htmlBuilder.Append("<li class='disabled'><a class='currentPage' pagenumber='" + 1 + "'>First</a></li>");
                htmlBuilder.Append("<li class='disabled'><a class='currentPage' pagenumber='" + (pagerSettings.currentPage - 1) + "'>Previous</a></li>");
            }
            else
            {
                htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + 1 + "'>First</a></li>");
                htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + (pagerSettings.currentPage) + "'>Previous</a></li>");
            }

            for (int i = pagerSettings.startPage; i <= pagerSettings.endPage; i++)
            {
                int pagenumber = pagerSettings.startPage;
                if (pagenumber == pagerSettings.currentPage)
                {
                    htmlBuilder.Append("<li  class='active'><a class='currentPage' pagenumber='" + pagenumber + "'>" + pagenumber + "</a></li>");
                }
                else
                {
                    htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + pagenumber + "'>" + pagenumber + "</a></li>");
                }
                ++pagerSettings.startPage;
            }

            if (pagerSettings.totalPages == pagerSettings.endPage)
            {
                htmlBuilder.Append("<li class='disabled'><a class='currentPage' pagenumber='" + (pagerSettings.currentPage + 1) + "'>Next</a></li>");
                htmlBuilder.Append("<li class='disabled'><a class='currentPage' pagenumber='" + (pagerSettings.totalPages) + "'>Last</a></li>");
            }
            else
            {
                htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + (pagerSettings.currentPage + 1) + "'>Next</a><li>");
                htmlBuilder.Append("<li><a class='currentPage' pagenumber='" + (pagerSettings.totalPages) + "'>Last</a></li>");
            }
            htmlBuilder.Append("</ul>");
            htmlBuilder.Append("</div>");
            htmlBuilder.Append("</div>");

            return htmlBuilder;
        }

        //public static StringBuilder CreateHtmlTableHeaderBlock(StringBuilder htmlBuilder,string[] HtmlTableHeaderColumns,string[] HtmlTableHeaderColumnIDs)
        //{
        //               return htmlBuilder;
        //} 
    }
}